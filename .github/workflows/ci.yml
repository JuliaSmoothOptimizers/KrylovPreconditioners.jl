name: CI
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow_failure }}
    strategy:
      fail-fast: false
      matrix:
        version: ['1']
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64]
        allow_failure: [false]
        include:
          - version: '1'
            os: macos-latest
            arch: arm64
            allow_failure: false
    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v3
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v3
        with:
          files: lcov.info

  gpu:
    runs-on:
      labels: ${{ matrix.gpu-backend }}
    continue-on-error: true
    strategy:
      matrix:
        julia-version: ['1']
        julia-arch: [x64]
        gpu-backend: [cuda, amdgpu, oneapi]
        include:
          - gpu-backend: cuda
            package: CUDA
            test-file: test/gpu/nvidia.jl
          - gpu-backend: amdgpu
            package: AMDGPU
            test-file: test/gpu/amd.jl
          - gpu-backend: oneapi
            package: oneAPI
            test-file: test/gpu/intel.jl
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Setup Julia
      uses: julia-actions/setup-julia@latest
      with:
        version: ${{ matrix.julia-version }}
    - uses: julia-actions/cache@v2
    - name: Install ${{ matrix.package }}
      run: |
        julia --color=yes -e '
          using Pkg
          Pkg.add("${{ matrix.package }}")
          Pkg.update()'
    - name: Run tests
      run: |
        julia --color=yes --project=./test -e '
          using Pkg
          Pkg.develop(path=".")
          Pkg.instantiate()
          using ${{ matrix.package }}
          include("${{ matrix.test-file }}")'
